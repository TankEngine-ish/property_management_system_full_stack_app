version: '3.8'

services:
  nextapp:
    container_name: nextapp
    image: nextapp:1.0.6
    build:
      context: ./frontend
      dockerfile: next.dockerfile
    ports:
      - '3000:3000'
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - goapp

  db:
    container_name: db
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data # stores data under Dockerâ€™s internal volume management directory
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  goapp:
    container_name: goapp
    image: goapp:1.0.4
    build:
      context: ./backend
      dockerfile: go.dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
    ports:
      - '8000:8000'
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./.env:/app/.env
      - pgdata:/var/lib/postgresql/data

  sonarqube:
    container_name: sonarqube
    image: sonarqube:latest
    ports:
      - '9000:9000' 
    environment:
      - SONAR_JDBC_URL=${SONAR_JDBC_URL}
      - SONAR_JDBC_USERNAME=${SONAR_JDBC_USERNAME}
      - SONAR_JDBC_PASSWORD=${SONAR_JDBC_PASSWORD}
    depends_on:
      - db
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs

volumes:  # These volumes are on root level on purpose!
  pgdata: {}
  sonarqube_data: {}
  sonarqube_extensions: {}
  sonarqube_logs: {}

  # sonarqube:
  #   container_name: sonarqube
  #   image: sonarqube:latest
  #   ports:
  #     - '9000:9000' # SonarQube accessible at localhost:9000
  #   environment:
  #     - SONAR_JDBC_URL=jdbc:postgresql://db/${POSTGRES_DB}
  #     - SONAR_JDBC_USERNAME=${POSTGRES_USER}
  #     - SONAR_JDBC_PASSWORD=${POSTGRES_PASSWORD}
  #   depends_on:
  #     - db
  #   volumes:
  #     - sonarqube_data:/opt/sonarqube/data
  #     - sonarqube_extensions:/opt/sonarqube/extensions
  #     - sonarqube_logs:/opt/sonarqube/logs


  # sonarqube_data: {}
  # sonarqube_extensions: {}
  # sonarqube_logs: {}


# version: '3.8'

# services:
#   nextapp:
#     container_name: nextapp
#     image: nextapp:1.0.0
#     build:
#       context: ./frontend
#       dockerfile: next.dockerfile
#     ports:
#       - '3000:3000'
#     environment:
#       - NEXT_PUBLIC_API_URL=http://localhost:8000
#     depends_on:
#       - goapp

#   goapp:
#     container_name: goapp
#     image: goapp:1.0.0
#     build:
#       context: ./backend
#       dockerfile: go.dockerfile
#     environment:
#       - DATABASE_URL=${DATABASE_URL}
#     ports:
#       - '8000:8000'
#     depends_on:
#       - db
#     volumes:
#       - ./.env:/app/.env

#   db:
#     container_name: db
#     image: postgres:15
#     environment:
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_DB: ${POSTGRES_DB}
#     ports:
#       - '5432:5432'
#     volumes:
#       - pgdata:/var/lib/postgresql/data

# volumes:
#   pgdata: {}
















































































































# services:
#   nextapp:
#     container_name: nextapp
#     image: nextapp:1.0.0
#     build:
#       context: ./frontend
#       dockerfile: next.dockerfile
#     ports:
#       - '3000:3000'
#     environment:
#       - NEXT_PUBLIC_API_URL=http://localhost:8000
#     depends_on:
#       - goapp
#   goapp:
#     container_name: goapp
#     image: goapp:1.0.0
#     build:
#       context: ./backend
#       dockerfile: go.dockerfile
#     environment:
#       - DATABASE_URL=${DATABASE_URL}
#     ports:
#       - '8000:8000'
#     depends_on:
#       - db
#     volumes:
#       - ./.env:/app/.env
#   db:
#     container_name: db
#     image: postgres:15
#     environment:
#       POSTGRES_USER: ${POSTGRES_USER}
#       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
#       POSTGRES_DB: ${POSTGRES_DB}
#     ports:
#       - '5432:5432'
#     volumes:
#       - pgdata:/var/lib/postgresql/data
# volumes:
#   pgdata: {}
